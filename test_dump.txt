============================================================
[CODE] '1 2 + print'
[CMD] py -m frog run tmp.frog
[PRINT] INT():3@tmp.frog:1:4
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
3

[EXIT CODE] 0

============================================================
[CODE] '1 + print'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:2: not enough items on stack for IntrinsicType.ADD: it expects two INTs on the stack
[NOTE] stack:
      0. INT()@tmp.frog:1:0
[EXIT CODE] 1

============================================================
[CODE] '1 2 +'
[CMD] py -m frog run tmp.frog
[ERROR] <?>:0:0: return type mismatch: expected 0 items on the stack, got 1
[NOTE] stack:
      0. INT()@tmp.frog:1:4
[NOTE] outs: (empty)
[EXIT CODE] 1

============================================================
[CODE] '? 1 ? 2 ? 3 ? 4 ? + ? + ? + ? print ?'
[CMD] py -m frog run tmp.frog
[INFO] tmp.frog:1:0: Stack at compile time:
[NOTE] stack: (empty)
[INFO] tmp.frog:1:4: Stack at compile time:
[NOTE] stack:
      0. INT()@tmp.frog:1:2
[INFO] tmp.frog:1:8: Stack at compile time:
[NOTE] stack:
      0. INT()@tmp.frog:1:2
      1. INT()@tmp.frog:1:6
[INFO] tmp.frog:1:12: Stack at compile time:
[NOTE] stack:
      0. INT()@tmp.frog:1:2
      1. INT()@tmp.frog:1:6
      2. INT()@tmp.frog:1:10
[INFO] tmp.frog:1:16: Stack at compile time:
[NOTE] stack:
      0. INT()@tmp.frog:1:2
      1. INT()@tmp.frog:1:6
      2. INT()@tmp.frog:1:10
      3. INT()@tmp.frog:1:14
[INFO] tmp.frog:1:20: Stack at compile time:
[NOTE] stack:
      0. INT()@tmp.frog:1:2
      1. INT()@tmp.frog:1:6
      2. INT()@tmp.frog:1:18
[INFO] tmp.frog:1:24: Stack at compile time:
[NOTE] stack:
      0. INT()@tmp.frog:1:2
      1. INT()@tmp.frog:1:22
[INFO] tmp.frog:1:28: Stack at compile time:
[NOTE] stack:
      0. INT()@tmp.frog:1:26
[INFO] tmp.frog:1:36: Stack at compile time:
[NOTE] stack: (empty)
[INFO] tmp.frog:1:0: Stack at runtime:
[NOTE] stack: (empty)
[INFO] tmp.frog:1:4: Stack at runtime:
[NOTE] stack:
      0. INT():1@tmp.frog:1:2
[INFO] tmp.frog:1:8: Stack at runtime:
[NOTE] stack:
      0. INT():1@tmp.frog:1:2
      1. INT():2@tmp.frog:1:6
[INFO] tmp.frog:1:12: Stack at runtime:
[NOTE] stack:
      0. INT():1@tmp.frog:1:2
      1. INT():2@tmp.frog:1:6
      2. INT():3@tmp.frog:1:10
[INFO] tmp.frog:1:16: Stack at runtime:
[NOTE] stack:
      0. INT():1@tmp.frog:1:2
      1. INT():2@tmp.frog:1:6
      2. INT():3@tmp.frog:1:10
      3. INT():4@tmp.frog:1:14
[INFO] tmp.frog:1:20: Stack at runtime:
[NOTE] stack:
      0. INT():1@tmp.frog:1:2
      1. INT():2@tmp.frog:1:6
      2. INT():7@tmp.frog:1:18
[INFO] tmp.frog:1:24: Stack at runtime:
[NOTE] stack:
      0. INT():1@tmp.frog:1:2
      1. INT():9@tmp.frog:1:22
[INFO] tmp.frog:1:28: Stack at runtime:
[NOTE] stack:
      0. INT():10@tmp.frog:1:26
[PRINT] INT():10@tmp.frog:1:26
[INFO] tmp.frog:1:36: Stack at runtime:
[NOTE] stack: (empty)
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
10

[EXIT CODE] 0

============================================================
[CODE] '+'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: not enough items on stack for IntrinsicType.ADD: it expects two INTs on the stack
[NOTE] stack: (empty)
[EXIT CODE] 1

============================================================
[CODE] '~'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: not enough items on stack for IntrinsicType.BNOT: it expects one INT on the stack
[NOTE] stack: (empty)
[EXIT CODE] 1

============================================================
[CODE] '/%'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: not enough items on stack for IntrinsicType.DIVMOD: it expects two INTs on the stack
[NOTE] stack: (empty)
[EXIT CODE] 1

============================================================
[CODE] '25 7 + print'
[CMD] py -m frog run tmp.frog
[PRINT] INT():32@tmp.frog:1:5
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
32

[EXIT CODE] 0

============================================================
[CODE] '25 7 - print'
[CMD] py -m frog run tmp.frog
[PRINT] INT():18@tmp.frog:1:5
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
18

[EXIT CODE] 0

============================================================
[CODE] '25 7 * print'
[CMD] py -m frog run tmp.frog
[PRINT] INT():175@tmp.frog:1:5
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
175

[EXIT CODE] 0

============================================================
[CODE] '25 7 / print'
[CMD] py -m frog run tmp.frog
[PRINT] INT():3@tmp.frog:1:5
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
3

[EXIT CODE] 0

============================================================
[CODE] '2 0 / print'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:4: division by zero
[NOTE] a: INT():2@tmp.frog:1:0
[NOTE] b: INT():0@tmp.frog:1:2
[EXIT CODE] 1

============================================================
[CODE] '25 7 % print'
[CMD] py -m frog run tmp.frog
[PRINT] INT():4@tmp.frog:1:5
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
4

[EXIT CODE] 0

============================================================
[CODE] '25 7 /% ? print print'
[CMD] py -m frog run tmp.frog
[INFO] tmp.frog:1:8: Stack at compile time:
[NOTE] stack:
      0. INT()@tmp.frog:1:5
      1. INT()@tmp.frog:1:5
[INFO] tmp.frog:1:8: Stack at runtime:
[NOTE] stack:
      0. INT():3@tmp.frog:1:5
      1. INT():4@tmp.frog:1:5
[PRINT] INT():4@tmp.frog:1:5
[PRINT] INT():3@tmp.frog:1:5
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
4
3

[EXIT CODE] 0

============================================================
[CODE] '25 7 << print'
[CMD] py -m frog run tmp.frog
[PRINT] INT():3200@tmp.frog:1:5
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
3200

[EXIT CODE] 0

============================================================
[CODE] '25 7 >> print'
[CMD] py -m frog run tmp.frog
[PRINT] INT():0@tmp.frog:1:5
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
0

[EXIT CODE] 0

============================================================
[CODE] '25 7 | print'
[CMD] py -m frog run tmp.frog
[PRINT] INT():31@tmp.frog:1:5
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
31

[EXIT CODE] 0

============================================================
[CODE] '25 7 & print'
[CMD] py -m frog run tmp.frog
[PRINT] INT():1@tmp.frog:1:5
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
1

[EXIT CODE] 0

============================================================
[CODE] '25 7 ^ print'
[CMD] py -m frog run tmp.frog
[PRINT] INT():30@tmp.frog:1:5
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
30

[EXIT CODE] 0

============================================================
[CODE] '25 ~ print'
[CMD] py -m frog run tmp.frog
[PRINT] INT():-26@tmp.frog:1:3
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
-26

[EXIT CODE] 0

============================================================
[CODE] 'true 5 + print'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:7: cannot add/subtract BOOL() and INT()
[NOTE] other_stack_items: (empty)
[EXIT CODE] 1

============================================================
[CODE] 'true 5 * print'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:7: cannot multiply/divide BOOL() by INT()
[NOTE] stack: (empty)
[EXIT CODE] 1

============================================================
[CODE] 'true 5 % print'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:7: cannot modulo BOOL() by INT()
[NOTE] stack: (empty)
[EXIT CODE] 1

============================================================
[CODE] 'true 5 | print'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:7: cannot bitwise or/and/xor BOOL() with INT()
[NOTE] stack: (empty)
[EXIT CODE] 1

============================================================
[CODE] 'true 5 << print'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:7: cannot shift BOOL() by INT()
[NOTE] stack: (empty)
[EXIT CODE] 1

============================================================
[CODE] 'true 5 && print'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:7: cannot and/or BOOL() with INT()
[NOTE] stack: (empty)
[EXIT CODE] 1

============================================================
[CODE] 'true 5 ! print'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:7: cannot not INT()
[NOTE] stack:
      0. BOOL()@tmp.frog:1:0
[EXIT CODE] 1

============================================================
[CODE] 'true 5 swap ~ print'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:12: cannot bitwise not an BOOL()
[NOTE] stack:
      0. INT()@tmp.frog:1:5
[EXIT CODE] 1

============================================================
[CODE] 'true 5 == print'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:7: cannot compare BOOL() and INT()
[NOTE] stack: (empty)
[EXIT CODE] 1

============================================================
[CODE] 'true 5 < print'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:7: cannot compare BOOL() and INT()
[NOTE] stack: (empty)
[EXIT CODE] 1

============================================================
[CODE] 'true false && print'
[CMD] py -m frog run tmp.frog
[PRINT] BOOL():False@tmp.frog:1:11
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
false

[EXIT CODE] 0

============================================================
[CODE] 'true false || print'
[CMD] py -m frog run tmp.frog
[PRINT] BOOL():True@tmp.frog:1:11
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
true

[EXIT CODE] 0

============================================================
[CODE] 'true ! print'
[CMD] py -m frog run tmp.frog
[PRINT] BOOL():False@tmp.frog:1:5
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
false

[EXIT CODE] 0

============================================================
[CODE] 'false ! print'
[CMD] py -m frog run tmp.frog
[PRINT] BOOL():True@tmp.frog:1:6
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
true

[EXIT CODE] 0

============================================================
[CODE] '1 2 == print'
[CMD] py -m frog run tmp.frog
[PRINT] BOOL():False@tmp.frog:1:4
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
false

[EXIT CODE] 0

============================================================
[CODE] '1 2 != print'
[CMD] py -m frog run tmp.frog
[PRINT] BOOL():True@tmp.frog:1:4
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
true

[EXIT CODE] 0

============================================================
[CODE] '1 2 < print'
[CMD] py -m frog run tmp.frog
[PRINT] BOOL():True@tmp.frog:1:4
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
true

[EXIT CODE] 0

============================================================
[CODE] '1 2 > print'
[CMD] py -m frog run tmp.frog
[PRINT] BOOL():False@tmp.frog:1:4
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
false

[EXIT CODE] 0

============================================================
[CODE] '1 2 <= print'
[CMD] py -m frog run tmp.frog
[PRINT] BOOL():True@tmp.frog:1:4
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
true

[EXIT CODE] 0

============================================================
[CODE] '1 2 >= print'
[CMD] py -m frog run tmp.frog
[PRINT] BOOL():False@tmp.frog:1:4
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
false

[EXIT CODE] 0

============================================================
[CODE] '1 2 ? print print'
[CMD] py -m frog run tmp.frog
[INFO] tmp.frog:1:4: Stack at compile time:
[NOTE] stack:
      0. INT()@tmp.frog:1:0
      1. INT()@tmp.frog:1:2
[INFO] tmp.frog:1:4: Stack at runtime:
[NOTE] stack:
      0. INT():1@tmp.frog:1:0
      1. INT():2@tmp.frog:1:2
[PRINT] INT():2@tmp.frog:1:2
[PRINT] INT():1@tmp.frog:1:0
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
2
1

[EXIT CODE] 0

============================================================
[CODE] '1 dup ? print print'
[CMD] py -m frog run tmp.frog
[INFO] tmp.frog:1:6: Stack at compile time:
[NOTE] stack:
      0. INT()@tmp.frog:1:0
      1. INT()@tmp.frog:1:0
[INFO] tmp.frog:1:6: Stack at runtime:
[NOTE] stack:
      0. INT():1@tmp.frog:1:0
      1. INT():1@tmp.frog:1:0
[PRINT] INT():1@tmp.frog:1:0
[PRINT] INT():1@tmp.frog:1:0
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
1
1

[EXIT CODE] 0

============================================================
[CODE] '1 2 drop ? print'
[CMD] py -m frog run tmp.frog
[INFO] tmp.frog:1:9: Stack at compile time:
[NOTE] stack:
      0. INT()@tmp.frog:1:0
[INFO] tmp.frog:1:9: Stack at runtime:
[NOTE] stack:
      0. INT():1@tmp.frog:1:0
[PRINT] INT():1@tmp.frog:1:0
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
1

[EXIT CODE] 0

============================================================
[CODE] '1 2 swap ? print print'
[CMD] py -m frog run tmp.frog
[INFO] tmp.frog:1:9: Stack at compile time:
[NOTE] stack:
      0. INT()@tmp.frog:1:2
      1. INT()@tmp.frog:1:0
[INFO] tmp.frog:1:9: Stack at runtime:
[NOTE] stack:
      0. INT():2@tmp.frog:1:2
      1. INT():1@tmp.frog:1:0
[PRINT] INT():1@tmp.frog:1:0
[PRINT] INT():2@tmp.frog:1:2
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
1
2

[EXIT CODE] 0

============================================================
[CODE] '1 2 3 ? print print print'
[CMD] py -m frog run tmp.frog
[INFO] tmp.frog:1:6: Stack at compile time:
[NOTE] stack:
      0. INT()@tmp.frog:1:0
      1. INT()@tmp.frog:1:2
      2. INT()@tmp.frog:1:4
[INFO] tmp.frog:1:6: Stack at runtime:
[NOTE] stack:
      0. INT():1@tmp.frog:1:0
      1. INT():2@tmp.frog:1:2
      2. INT():3@tmp.frog:1:4
[PRINT] INT():3@tmp.frog:1:4
[PRINT] INT():2@tmp.frog:1:2
[PRINT] INT():1@tmp.frog:1:0
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
3
2
1

[EXIT CODE] 0

============================================================
[CODE] '1 2 3 rot ? print print print'
[CMD] py -m frog run tmp.frog
[INFO] tmp.frog:1:10: Stack at compile time:
[NOTE] stack:
      0. INT()@tmp.frog:1:2
      1. INT()@tmp.frog:1:4
      2. INT()@tmp.frog:1:0
[INFO] tmp.frog:1:10: Stack at runtime:
[NOTE] stack:
      0. INT():2@tmp.frog:1:2
      1. INT():3@tmp.frog:1:4
      2. INT():1@tmp.frog:1:0
[PRINT] INT():1@tmp.frog:1:0
[PRINT] INT():3@tmp.frog:1:4
[PRINT] INT():2@tmp.frog:1:2
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
1
3
2

[EXIT CODE] 0

============================================================
[CODE] 'print'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: not enough items on stack for IntrinsicType.PRINT: it expects one item on the stack
[NOTE] stack: (empty)
[EXIT CODE] 1

============================================================
[CODE] '?'
[CMD] py -m frog run tmp.frog
[INFO] tmp.frog:1:0: Stack at compile time:
[NOTE] stack: (empty)
[INFO] tmp.frog:1:0: Stack at runtime:
[NOTE] stack: (empty)
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[EXIT CODE] 0

============================================================
[CODE] 'dup'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: not enough items on stack for IntrinsicType.DUP: it expects one item on the stack
[NOTE] stack: (empty)
[EXIT CODE] 1

============================================================
[CODE] 'swap'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: not enough items on stack for IntrinsicType.SWAP: it expects two items on the stack
[NOTE] stack: (empty)
[EXIT CODE] 1

============================================================
[CODE] 'drop'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: not enough items on stack for IntrinsicType.DROP: it expects one item on the stack
[NOTE] stack: (empty)
[EXIT CODE] 1

============================================================
[CODE] 'rot'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: not enough items on stack for IntrinsicType.ROT: it expects three items on the stack
[NOTE] stack: (empty)
[EXIT CODE] 1

============================================================
[CODE] '1 2 == if do 5 else 7 end print'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:10: condition part of InstructionType.IF should put exactly one BOOL on the stack
[NOTE] expected_stack:
      0. BOOL()@tmp.frog:1:4
[NOTE] actual_stack: (empty)
[EXIT CODE] 1

============================================================
[CODE] 'if 1 2 == do 5 else 7 end print'
[CMD] py -m frog run tmp.frog
[PRINT] INT():7@tmp.frog:1:20
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
7

[EXIT CODE] 0

============================================================
[CODE] 'if 1 2 != do 5 else 7 end print'
[CMD] py -m frog run tmp.frog
[PRINT] INT():5@tmp.frog:1:13
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
5

[EXIT CODE] 0

============================================================
[CODE] 'if 1 2 != do 5 else 7 8 end print'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:24: both branches of InstructionType.IF must leave the stack in the same state
[NOTE] stack_then:
      0. INT()@tmp.frog:1:13
[NOTE] stack_else:
      0. INT()@tmp.frog:1:20
      1. INT()@tmp.frog:1:22
[EXIT CODE] 1

============================================================
[CODE] 'if 1 2 != do 5 else 7 end'
[CMD] py -m frog run tmp.frog
[ERROR] <?>:0:0: return type mismatch: expected 0 items on the stack, got 1
[NOTE] stack:
      0. INT()@tmp.frog:1:20
[NOTE] outs: (empty)
[EXIT CODE] 1

============================================================
[CODE] 'if 1 2 != do 5 else end'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:20: both branches of InstructionType.IF must leave the stack in the same state
[NOTE] stack_then:
      0. INT()@tmp.frog:1:13
[NOTE] stack_else: (empty)
[EXIT CODE] 1

============================================================
[CODE] 'if 1 2 != do 5 end'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:15: both branches of InstructionType.IF must leave the stack in the same state
[NOTE] stack_then:
      0. INT()@tmp.frog:1:13
[NOTE] stack_else: (empty)
[EXIT CODE] 1

============================================================
[CODE] 'if 1 2 != do 5 print end'
[CMD] py -m frog run tmp.frog
[PRINT] INT():5@tmp.frog:1:13
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
5

[EXIT CODE] 0

============================================================
[CODE] '5 if 1 2 == do drop 7 end print'
[CMD] py -m frog run tmp.frog
[PRINT] INT():5@tmp.frog:1:0
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
5

[EXIT CODE] 0

============================================================
[CODE] '5 if 1 2 != do drop 7 end print'
[CMD] py -m frog run tmp.frog
[PRINT] INT():7@tmp.frog:1:20
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
7

[EXIT CODE] 0

============================================================
[CODE] 'if'
[CMD] py -m frog run tmp.frog
[ERROR] <?>:0:0: unclosed blocks
[NOTE] blocks:
      0. Block(type=<InstructionType.IF: 7>, ip1=0, ip2=-1, ip3=-1, ip4=-1)
[EXIT CODE] 1

============================================================
[CODE] 'if 1 2 == do'
[CMD] py -m frog run tmp.frog
[ERROR] <?>:0:0: unclosed blocks
[NOTE] blocks:
      0. Block(type=<InstructionType.IF: 7>, ip1=0, ip2=4, ip3=-1, ip4=-1)
[EXIT CODE] 1

============================================================
[CODE] 'if 1 2 == do 5 print else'
[CMD] py -m frog run tmp.frog
[ERROR] <?>:0:0: unclosed blocks
[NOTE] blocks:
      0. Block(type=<InstructionType.IF: 7>, ip1=0, ip2=4, ip3=7, ip4=-1)
[EXIT CODE] 1

============================================================
[CODE] 'if 1 2 == else 5 end'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:17: if <cond> do <body> [else <body>] end
[EXIT CODE] 1

============================================================
[CODE] 'if do end'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:3: not enough items on the stack for InstructionType.DO: it expects one BOOL on the stack
[EXIT CODE] 1

============================================================
[CODE] 'if 1 do end'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:5: InstructionType.DO expects one BOOL on the stack, but got INT()
[NOTE] other_stack_items: (empty)
[EXIT CODE] 1

============================================================
[CODE] 'if 1 2 do end'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:7: InstructionType.DO expects one BOOL on the stack, but got INT()
[NOTE] other_stack_items:
      0. INT()@tmp.frog:1:3
[EXIT CODE] 1

============================================================
[CODE] 'if 1 2 3 do end'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:9: InstructionType.DO expects one BOOL on the stack, but got INT()
[NOTE] other_stack_items:
      0. INT()@tmp.frog:1:3
      1. INT()@tmp.frog:1:5
[EXIT CODE] 1

============================================================
[CODE] 'if 1 2 3 == do end'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:12: condition part of InstructionType.IF should put exactly one BOOL on the stack
[NOTE] expected_stack: (empty)
[NOTE] actual_stack:
      0. INT()@tmp.frog:1:3
[EXIT CODE] 1

============================================================
[CODE] 'else'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: ELSE should follow an IF
[EXIT CODE] 1

============================================================
[CODE] '10 while dup 5 > do 1 - print ? end drop'
[CMD] py -m frog run tmp.frog
[INFO] tmp.frog:1:30: Stack at compile time:
[NOTE] stack: (empty)
[ERROR] tmp.frog:1:32: InstructionType.WHILE must not alter the stack state
[EXIT CODE] 1

============================================================
[CODE] '10 while dup 5 > do 1 - dup print ? end drop'
[CMD] py -m frog run tmp.frog
[INFO] tmp.frog:1:34: Stack at compile time:
[NOTE] stack:
      0. INT()@tmp.frog:1:22
[PRINT] INT():9@tmp.frog:1:22
[INFO] tmp.frog:1:34: Stack at runtime:
[NOTE] stack:
      0. INT():9@tmp.frog:1:22
[PRINT] INT():8@tmp.frog:1:22
[INFO] tmp.frog:1:34: Stack at runtime:
[NOTE] stack:
      0. INT():8@tmp.frog:1:22
[PRINT] INT():7@tmp.frog:1:22
[INFO] tmp.frog:1:34: Stack at runtime:
[NOTE] stack:
      0. INT():7@tmp.frog:1:22
[PRINT] INT():6@tmp.frog:1:22
[INFO] tmp.frog:1:34: Stack at runtime:
[NOTE] stack:
      0. INT():6@tmp.frog:1:22
[PRINT] INT():5@tmp.frog:1:22
[INFO] tmp.frog:1:34: Stack at runtime:
[NOTE] stack:
      0. INT():5@tmp.frog:1:22
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
9
8
7
6
5

[EXIT CODE] 0

============================================================
[CODE] 'while else'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:6: ELSE should follow an IF, not WHILE
[EXIT CODE] 1

============================================================
[CODE] 'while end'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:6: while <cond> do <body> end
[EXIT CODE] 1

============================================================
[CODE] 'while'
[CMD] py -m frog run tmp.frog
[ERROR] <?>:0:0: unclosed blocks
[NOTE] blocks:
      0. Block(type=<InstructionType.WHILE: 9>, ip1=0, ip2=-1, ip3=-1, ip4=-1)
[EXIT CODE] 1

============================================================
[CODE] 'while 1 2 == do'
[CMD] py -m frog run tmp.frog
[ERROR] <?>:0:0: unclosed blocks
[NOTE] blocks:
      0. Block(type=<InstructionType.WHILE: 9>, ip1=0, ip2=4, ip3=-1, ip4=-1)
[EXIT CODE] 1

============================================================
[CODE] 'while do end'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:6: not enough items on the stack for InstructionType.DO: it expects one BOOL on the stack
[EXIT CODE] 1

============================================================
[CODE] 'while 1 do end'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:8: InstructionType.DO expects one BOOL on the stack, but got INT()
[NOTE] other_stack_items: (empty)
[EXIT CODE] 1

============================================================
[CODE] 'while 1 2 do end'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:10: InstructionType.DO expects one BOOL on the stack, but got INT()
[NOTE] other_stack_items:
      0. INT()@tmp.frog:1:6
[EXIT CODE] 1

============================================================
[CODE] 'while 1 2 3 do end'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:12: InstructionType.DO expects one BOOL on the stack, but got INT()
[NOTE] other_stack_items:
      0. INT()@tmp.frog:1:6
      1. INT()@tmp.frog:1:8
[EXIT CODE] 1

============================================================
[CODE] 'while 1 2 3 == do end'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:15: condition part of InstructionType.WHILE should put exactly one BOOL on the stack
[NOTE] expected_stack: (empty)
[NOTE] actual_stack:
      0. INT()@tmp.frog:1:6
[EXIT CODE] 1

============================================================
[CODE] 'do'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: DO should follow an IF or WHILE
[EXIT CODE] 1

============================================================
[CODE] 'end'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: END should follow an IF or WHILE
[EXIT CODE] 1

============================================================
[CODE] ''
[CMD] py -m frog run tmp.frog
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[EXIT CODE] 0

============================================================
[CODE] "'"
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: unterminated character literal
[EXIT CODE] 1

============================================================
[CODE] "''"
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: invalid character literal
[EXIT CODE] 1

============================================================
[CODE] "'aa'"
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: invalid character literal
[EXIT CODE] 1

============================================================
[CODE] "'\\n'"
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: invalid character literal
[EXIT CODE] 1

============================================================
[CODE] "'\\t'"
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: invalid character literal
[EXIT CODE] 1

============================================================
[CODE] "'\\''"
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:1: unterminated character literal
[EXIT CODE] 1

============================================================
[CODE] '"'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: unterminated string literal
[EXIT CODE] 1

============================================================
[CODE] '"" ?'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: not implemented: string literals
[LOC] __init__.py:210:0
[EXIT CODE] 3

============================================================
[CODE] '"abc" ?'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: not implemented: string literals
[LOC] __init__.py:210:0
[EXIT CODE] 3

============================================================
[CODE] '"abc\\n" ?'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: not implemented: string literals
[LOC] __init__.py:210:0
[EXIT CODE] 3

============================================================
[CODE] '"abc\'" ?'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: not implemented: string literals
[LOC] __init__.py:210:0
[EXIT CODE] 3

============================================================
[CODE] '"abc\\"" ?'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:1: unterminated string literal
[EXIT CODE] 1

============================================================
[CODE] '1 // comment \n print'
[CMD] py -m frog run tmp.frog
[PRINT] INT():1@tmp.frog:1:0
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
1

[EXIT CODE] 0

============================================================
[CODE] 'proc'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: expected a name after PROC
[EXIT CODE] 1

============================================================
[CODE] 'somerandomword'
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:1:0: unknown word somerandomword
[EXIT CODE] 1

============================================================
[CODE] '\n    proc a int -- int do 2 * end\n    5 a print\n    '
[CMD] py -m frog run tmp.frog
[PRINT] INT():10@tmp.frog:2:27
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
10

[EXIT CODE] 0

============================================================
[CODE] '\n    proc a do 2 * end\n    '
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:2:9: expected a KeywordType.TYPE_DELIM after proc args, got Token(type=<TokenType.KEYWORD: 6>, value=<KeywordType.DO: 5>, loc=tmp.frog:2:11)
[EXIT CODE] 1

============================================================
[CODE] '\n    proc a int do 2 * end\n    '
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:2:9: expected a KeywordType.TYPE_DELIM after proc args, got Token(type=<TokenType.KEYWORD: 6>, value=<KeywordType.DO: 5>, loc=tmp.frog:2:15)
[EXIT CODE] 1

============================================================
[CODE] '\n    proc a -- do 2 * end\n    '
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:2:19: not enough items on stack for IntrinsicType.MUL: it expects two INTs on the stack
[NOTE] other_stack_items:
      0. INT()@tmp.frog:2:17
[EXIT CODE] 1

============================================================
[CODE] '\n    proc a int -- do 2 * end\n    '
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:2:25: return type mismatch: expected 0 items on the stack, got 1
[NOTE] stack:
      0. INT()@tmp.frog:2:23
[NOTE] outs: (empty)
[EXIT CODE] 1

============================================================
[CODE] '\n    proc a int -- int int do 2 * end\n    '
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:2:33: return type mismatch: expected 2 items on the stack, got 1
[NOTE] stack:
      0. INT()@tmp.frog:2:31
[NOTE] outs:
      0. INT()
      1. INT()
[EXIT CODE] 1

============================================================
[CODE] '\n    proc a int -- int do drop 5 end\n    5 a print\n    '
[CMD] py -m frog run tmp.frog
[PRINT] INT():5@tmp.frog:2:30
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
5

[EXIT CODE] 0

============================================================
[CODE] '\n    proc a bool -- int do drop 5 end\n    5 a print\n    '
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:3:6: stack doesnt match at 0 for a: expected INT() but got BOOL()
[NOTE] stack:
      0. INT()@tmp.frog:3:4
[NOTE] ins:
      0. BOOL()
[EXIT CODE] 1

============================================================
[CODE] '\n    proc a int int -- int do + end\n    5 a print\n    '
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:3:6: stack too small for a: expected 2 but got 1
[NOTE] stack:
      0. INT()@tmp.frog:3:4
[NOTE] ins:
      0. INT()
      1. INT()
[EXIT CODE] 1

============================================================
[CODE] '\n    proc a x -- y do + end\n    5 a print\n    '
[CMD] py -m frog run tmp.frog
[ERROR] tmp.frog:2:11: expected a type after proc name, got x
[EXIT CODE] 1

============================================================
[CODE] '\n    proc a int int -- int do + end\n    5 7 a print\n    '
[CMD] py -m frog run tmp.frog
[PRINT] INT():12@tmp.frog:2:29
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
12

[EXIT CODE] 0

============================================================
[CODE] '5 int ? cast ? print'
[CMD] py -m frog run tmp.frog
[INFO] tmp.frog:1:6: Stack at compile time:
[NOTE] stack:
      0. INT()@tmp.frog:1:0
      1. TYPE(INT())@tmp.frog:1:2
[WARN] tmp.frog:1:8: redundant cast INT() to INT()
[INFO] tmp.frog:1:13: Stack at compile time:
[NOTE] stack:
      0. INT()@tmp.frog:1:8
[INFO] tmp.frog:1:6: Stack at runtime:
[NOTE] stack:
      0. INT():5@tmp.frog:1:0
      1. TYPE(INT()):INT()@tmp.frog:1:2
[WARN] tmp.frog:1:8: redundant cast INT() to INT()
[INFO] tmp.frog:1:13: Stack at runtime:
[NOTE] stack:
      0. INT():5@tmp.frog:1:8
[PRINT] INT():5@tmp.frog:1:8
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[WARN] tmp.frog:1:8: redundant cast INT() to INT()
[WARN] tmp.frog:1:8: redundant cast INT() to INT()
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
5

[EXIT CODE] 0

============================================================
[CODE] '5 bool cast print'
[CMD] py -m frog run tmp.frog
[PRINT] BOOL():True@tmp.frog:1:7
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
true

[EXIT CODE] 0

============================================================
[CODE] '0 bool cast print'
[CMD] py -m frog run tmp.frog
[PRINT] BOOL():False@tmp.frog:1:7
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
false

[EXIT CODE] 0

============================================================
[CODE] 'true int cast print'
[CMD] py -m frog run tmp.frog
[PRINT] INT():1@tmp.frog:1:9
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
1

[EXIT CODE] 0

============================================================
[CODE] 'false int cast print'
[CMD] py -m frog run tmp.frog
[PRINT] INT():0@tmp.frog:1:10
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
0

[EXIT CODE] 0

============================================================
[CODE] 'false bool cast print'
[CMD] py -m frog run tmp.frog
[WARN] tmp.frog:1:11: redundant cast BOOL() to BOOL()
[WARN] tmp.frog:1:11: redundant cast BOOL() to BOOL()
[PRINT] BOOL():False@tmp.frog:1:11
[EXIT CODE] 0
[CMD] py -m frog -l WARN build -r tmp.frog
[WARN] tmp.frog:1:11: redundant cast BOOL() to BOOL()
[WARN] tmp.frog:1:11: redundant cast BOOL() to BOOL()
[CMD] gcc tmp.c -o tmp.exe
[CMD] ./tmp.exe
[STDOUT]:
false

[EXIT CODE] 0

============================================================
[CMD] py -m frog
[STDOUT]:
Usage: py -m frog [OPTIONS] SUBCOMMAND <ARGS>
[ERROR] no subcommand specified

[EXIT CODE] 2
============================================================
[CMD] py -m frog -h
[STDOUT]:
Usage: py -m frog [OPTIONS] SUBCOMMAND <ARGS>
Options:
  -h --help                   print this help message
  -l <level>                  log level: ERROR,WARN,INFO,TRACE
Subcommands:
  run FILE                  interpret
    FILE                      a file to interpret
    OPTIONS:
  build [OPTIONS] FILE      build
    FILE                      a file to build
    OPTIONS:
      -o FILE                 where to put built binary
      -r                      also run the binary
  repl                      start a Read-Eval-Print-Loop

[EXIT CODE] 0
============================================================
[CMD] py -m frog --help
[STDOUT]:
Usage: py -m frog [OPTIONS] SUBCOMMAND <ARGS>
Options:
  -h --help                   print this help message
  -l <level>                  log level: ERROR,WARN,INFO,TRACE
Subcommands:
  run FILE                  interpret
    FILE                      a file to interpret
    OPTIONS:
  build [OPTIONS] FILE      build
    FILE                      a file to build
    OPTIONS:
      -o FILE                 where to put built binary
      -r                      also run the binary
  repl                      start a Read-Eval-Print-Loop

[EXIT CODE] 0
============================================================
[CMD] py -m frog run
[STDOUT]:
Usage: py -m frog [OPTIONS] SUBCOMMAND <ARGS>
[ERROR] no file specified

[EXIT CODE] 2
============================================================
[CMD] py -m frog run xxx
[STDOUT]:
[ERROR] file xxx does not exist

[EXIT CODE] 1
============================================================
[CMD] py -m frog -l
[STDOUT]:
Usage: py -m frog [OPTIONS] SUBCOMMAND <ARGS>
[ERROR] no log level specified

[EXIT CODE] 2
============================================================
[CMD] py -m frog -l TRACE
[STDOUT]:
Usage: py -m frog [OPTIONS] SUBCOMMAND <ARGS>
[ERROR] no subcommand specified

[EXIT CODE] 2
============================================================
[CMD] py -m frog -l TRACE run
[STDOUT]:
Usage: py -m frog [OPTIONS] SUBCOMMAND <ARGS>
[ERROR] no file specified

[EXIT CODE] 2
============================================================
[CMD] py -m frog -l TRACE run examples/01_simple.frog
[STDOUT]:
[TRACE] <?>:0:0: file: examples/01_simple.frog
[NOTE] Tokens:
      0. examples/01_simple.frog:1:0:INT:1
      1. examples/01_simple.frog:1:2:INT:2
      2. examples/01_simple.frog:1:4:WORD:'?'
      3. examples/01_simple.frog:1:6:WORD:'+'
      4. examples/01_simple.frog:1:8:WORD:'?'
      5. examples/01_simple.frog:1:10:WORD:'print'
[TRACE] <?>:0:0: Compiled IR
[NOTE] IR:
    IR:
    proc main:
      0. PUSH_INT:1
      1. PUSH_INT:2
      2. INTRINSIC:DEBUG
      3. INTRINSIC:ADD
      4. INTRINSIC:DEBUG
      5. INTRINSIC:PRINT
      6. RET
[INFO] examples/01_simple.frog:1:4: Stack at compile time:
[NOTE] stack:
      0. INT()@examples/01_simple.frog:1:0
      1. INT()@examples/01_simple.frog:1:2
[INFO] examples/01_simple.frog:1:8: Stack at compile time:
[NOTE] stack:
      0. INT()@examples/01_simple.frog:1:6
[INFO] examples/01_simple.frog:1:4: Stack at runtime:
[NOTE] stack:
      0. INT():1@examples/01_simple.frog:1:0
      1. INT():2@examples/01_simple.frog:1:2
[INFO] examples/01_simple.frog:1:8: Stack at runtime:
[NOTE] stack:
      0. INT():3@examples/01_simple.frog:1:6
[PRINT] INT():3@examples/01_simple.frog:1:6

[EXIT CODE] 0
============================================================
[CMD] py -m frog -l LOL run examples/01_simple.frog
[STDOUT]:
[ERROR] <cli>:1:0: invalid log level: LOL, expected one of ['ERROR', 'WARN', 'INFO', 'TRACE']

[EXIT CODE] 1
============================================================
[CMD] py -m frog -l WARN run examples/01_simple.frog
[STDOUT]:
[PRINT] INT():3@examples/01_simple.frog:1:6

[EXIT CODE] 0
============================================================
[CMD] py -m frog -l INFO run examples/01_simple.frog
[STDOUT]:
[INFO] examples/01_simple.frog:1:4: Stack at compile time:
[NOTE] stack:
      0. INT()@examples/01_simple.frog:1:0
      1. INT()@examples/01_simple.frog:1:2
[INFO] examples/01_simple.frog:1:8: Stack at compile time:
[NOTE] stack:
      0. INT()@examples/01_simple.frog:1:6
[INFO] examples/01_simple.frog:1:4: Stack at runtime:
[NOTE] stack:
      0. INT():1@examples/01_simple.frog:1:0
      1. INT():2@examples/01_simple.frog:1:2
[INFO] examples/01_simple.frog:1:8: Stack at runtime:
[NOTE] stack:
      0. INT():3@examples/01_simple.frog:1:6
[PRINT] INT():3@examples/01_simple.frog:1:6

[EXIT CODE] 0
============================================================
[CMD] py -m frog -l ERROR run examples/01_simple.frog
[STDOUT]:
[PRINT] INT():3@examples/01_simple.frog:1:6

[EXIT CODE] 0
============================================================
[CMD] py -m frog -l TRACE run examples/02_while.frog
[STDOUT]:
[TRACE] <?>:0:0: file: examples/02_while.frog
[NOTE] Tokens:
      0. examples/02_while.frog:2:0:INT:1
      1. examples/02_while.frog:3:0:INT:2
      2. examples/02_while.frog:4:0:WORD:'swap'
      3. examples/02_while.frog:5:0:WORD:'dup'
      4. examples/02_while.frog:6:0:WORD:'print'
      5. examples/02_while.frog:7:0:INT:10
      6. examples/02_while.frog:8:0:WORD:'*'
      7. examples/02_while.frog:9:0:WORD:'+'
      8. examples/02_while.frog:10:0:KEYWORD:WHILE
      9. examples/02_while.frog:11:2:WORD:'dup'
     10. examples/02_while.frog:12:2:INT:3
     11. examples/02_while.frog:13:2:WORD:'>'
     12. examples/02_while.frog:14:0:KEYWORD:DO
     13. examples/02_while.frog:15:2:KEYWORD:IF
     14. examples/02_while.frog:16:4:WORD:'dup'
     15. examples/02_while.frog:17:4:INT:2
     16. examples/02_while.frog:18:4:WORD:'%'
     17. examples/02_while.frog:19:4:INT:0
     18. examples/02_while.frog:20:4:WORD:'=='
     19. examples/02_while.frog:21:2:KEYWORD:DO
     20. examples/02_while.frog:22:4:INT:5
     21. examples/02_while.frog:23:2:KEYWORD:ELSE
     22. examples/02_while.frog:24:4:INT:7
     23. examples/02_while.frog:25:2:KEYWORD:END
     24. examples/02_while.frog:27:2:WORD:'print'
     25. examples/02_while.frog:28:2:INT:1
     26. examples/02_while.frog:29:2:WORD:'-'
     27. examples/02_while.frog:30:0:KEYWORD:END
     28. examples/02_while.frog:32:0:WORD:'drop'
[TRACE] <?>:0:0: Compiled IR
[NOTE] IR:
    IR:
    proc main:
      0. PUSH_INT:1
      1. PUSH_INT:2
      2. INTRINSIC:SWAP
      3. INTRINSIC:DUP
      4. INTRINSIC:PRINT
      5. PUSH_INT:10
      6. INTRINSIC:MUL
      7. INTRINSIC:ADD
      8. WHILE
      9. INTRINSIC:DUP
     10. PUSH_INT:3
     11. INTRINSIC:GT
     12. DO:27
     13. IF
     14. INTRINSIC:DUP
     15. PUSH_INT:2
     16. INTRINSIC:MOD
     17. PUSH_INT:0
     18. INTRINSIC:EQ
     19. DO:21
     20. PUSH_INT:5
     21. ELSE:23
     22. PUSH_INT:7
     23. END:24
     24. INTRINSIC:PRINT
     25. PUSH_INT:1
     26. INTRINSIC:SUB
     27. END:8
     28. INTRINSIC:DROP
     29. RET
[PRINT] INT():1@examples/02_while.frog:2:0
[PRINT] INT():5@examples/02_while.frog:22:4
[PRINT] INT():7@examples/02_while.frog:24:4
[PRINT] INT():5@examples/02_while.frog:22:4
[PRINT] INT():7@examples/02_while.frog:24:4
[PRINT] INT():5@examples/02_while.frog:22:4
[PRINT] INT():7@examples/02_while.frog:24:4
[PRINT] INT():5@examples/02_while.frog:22:4
[PRINT] INT():7@examples/02_while.frog:24:4
[PRINT] INT():5@examples/02_while.frog:22:4

[EXIT CODE] 0
============================================================
[CMD] py -m frog -l TRACE build -r examples/02_while.frog
[STDOUT]:
[TRACE] <?>:0:0: file: examples/02_while.frog
[NOTE] Tokens:
      0. examples/02_while.frog:2:0:INT:1
      1. examples/02_while.frog:3:0:INT:2
      2. examples/02_while.frog:4:0:WORD:'swap'
      3. examples/02_while.frog:5:0:WORD:'dup'
      4. examples/02_while.frog:6:0:WORD:'print'
      5. examples/02_while.frog:7:0:INT:10
      6. examples/02_while.frog:8:0:WORD:'*'
      7. examples/02_while.frog:9:0:WORD:'+'
      8. examples/02_while.frog:10:0:KEYWORD:WHILE
      9. examples/02_while.frog:11:2:WORD:'dup'
     10. examples/02_while.frog:12:2:INT:3
     11. examples/02_while.frog:13:2:WORD:'>'
     12. examples/02_while.frog:14:0:KEYWORD:DO
     13. examples/02_while.frog:15:2:KEYWORD:IF
     14. examples/02_while.frog:16:4:WORD:'dup'
     15. examples/02_while.frog:17:4:INT:2
     16. examples/02_while.frog:18:4:WORD:'%'
     17. examples/02_while.frog:19:4:INT:0
     18. examples/02_while.frog:20:4:WORD:'=='
     19. examples/02_while.frog:21:2:KEYWORD:DO
     20. examples/02_while.frog:22:4:INT:5
     21. examples/02_while.frog:23:2:KEYWORD:ELSE
     22. examples/02_while.frog:24:4:INT:7
     23. examples/02_while.frog:25:2:KEYWORD:END
     24. examples/02_while.frog:27:2:WORD:'print'
     25. examples/02_while.frog:28:2:INT:1
     26. examples/02_while.frog:29:2:WORD:'-'
     27. examples/02_while.frog:30:0:KEYWORD:END
     28. examples/02_while.frog:32:0:WORD:'drop'
[TRACE] <?>:0:0: Compiled IR
[NOTE] IR:
    IR:
    proc main:
      0. PUSH_INT:1
      1. PUSH_INT:2
      2. INTRINSIC:SWAP
      3. INTRINSIC:DUP
      4. INTRINSIC:PRINT
      5. PUSH_INT:10
      6. INTRINSIC:MUL
      7. INTRINSIC:ADD
      8. WHILE
      9. INTRINSIC:DUP
     10. PUSH_INT:3
     11. INTRINSIC:GT
     12. DO:27
     13. IF
     14. INTRINSIC:DUP
     15. PUSH_INT:2
     16. INTRINSIC:MOD
     17. PUSH_INT:0
     18. INTRINSIC:EQ
     19. DO:21
     20. PUSH_INT:5
     21. ELSE:23
     22. PUSH_INT:7
     23. END:24
     24. INTRINSIC:PRINT
     25. PUSH_INT:1
     26. INTRINSIC:SUB
     27. END:8
     28. INTRINSIC:DROP
     29. RET
[TRACE] <?>:0:0: Generated C code:
[NOTE] generated_code:
    #include <stdio.h>
    #include <stdbool.h>
    typedef struct {
    } ret_main;
    ret_main proc_main() {
      int lit_int_0;
      int lit_int_1;
      int dup_0;
      int lit_int_2;
      int mul_0;
      int add_0;
      int dup_1;
      int lit_int_3;
      int gt_0;
      int dup_2;
      int lit_int_4;
      int mod_0;
      int lit_int_5;
      int eq_0;
      int lit_int_6;
      int lit_int_7;
      int lit_int_8;
      int sub_0;
      lit_int_0 = 1;
      lit_int_1 = 2;
      dup_0 = lit_int_0;
      printf("%d\n", dup_0);
      lit_int_2 = 10;
      mul_0 = lit_int_0 * lit_int_2;
      add_0 = lit_int_1 + mul_0;
      while (true) {
        dup_1 = add_0;
        lit_int_3 = 3;
        gt_0 = dup_1 > lit_int_3;
        if (gt_0) {
          dup_2 = add_0;
          lit_int_4 = 2;
          mod_0 = dup_2 % lit_int_4;
          lit_int_5 = 0;
          eq_0 = mod_0 == lit_int_5;
          if (eq_0) {
            lit_int_6 = 5;
          } else {
            lit_int_7 = 7;
            lit_int_6 = lit_int_7;
          }
          printf("%d\n", lit_int_6);
          lit_int_8 = 1;
          sub_0 = add_0 - lit_int_8;
          add_0 = sub_0;
        } else break;
      }
      return (ret_main){
      };
    }
    int main() {
      proc_main();
      return 0;
    }
[CMD] gcc examples/02_while.c -o examples/02_while.exe
[CMD] ./examples/02_while.exe
[STDOUT]:
1
5
7
5
7
5
7
5
7
5


[EXIT CODE] 0
============================================================
[CMD] py -m frog run examples/00_empty.frog
[EXIT CODE] 0
============================================================
[CMD] py -m frog build -r examples/00_empty.frog
[STDOUT]:
[CMD] gcc examples/00_empty.c -o examples/00_empty.exe
[CMD] ./examples/00_empty.exe

[EXIT CODE] 0
============================================================
[CMD] py -m frog run examples/01_simple.frog
[STDOUT]:
[INFO] examples/01_simple.frog:1:4: Stack at compile time:
[NOTE] stack:
      0. INT()@examples/01_simple.frog:1:0
      1. INT()@examples/01_simple.frog:1:2
[INFO] examples/01_simple.frog:1:8: Stack at compile time:
[NOTE] stack:
      0. INT()@examples/01_simple.frog:1:6
[INFO] examples/01_simple.frog:1:4: Stack at runtime:
[NOTE] stack:
      0. INT():1@examples/01_simple.frog:1:0
      1. INT():2@examples/01_simple.frog:1:2
[INFO] examples/01_simple.frog:1:8: Stack at runtime:
[NOTE] stack:
      0. INT():3@examples/01_simple.frog:1:6
[PRINT] INT():3@examples/01_simple.frog:1:6

[EXIT CODE] 0
============================================================
[CMD] py -m frog build -r examples/01_simple.frog
[STDOUT]:
[INFO] examples/01_simple.frog:1:4: Stack at compile time:
[NOTE] stack:
      0. INT()@examples/01_simple.frog:1:0
      1. INT()@examples/01_simple.frog:1:2
[INFO] examples/01_simple.frog:1:8: Stack at compile time:
[NOTE] stack:
      0. INT()@examples/01_simple.frog:1:6
[CMD] gcc examples/01_simple.c -o examples/01_simple.exe
[CMD] ./examples/01_simple.exe
[STDOUT]:
3


[EXIT CODE] 0
============================================================
[CMD] py -m frog run examples/02_while.frog
[STDOUT]:
[PRINT] INT():1@examples/02_while.frog:2:0
[PRINT] INT():5@examples/02_while.frog:22:4
[PRINT] INT():7@examples/02_while.frog:24:4
[PRINT] INT():5@examples/02_while.frog:22:4
[PRINT] INT():7@examples/02_while.frog:24:4
[PRINT] INT():5@examples/02_while.frog:22:4
[PRINT] INT():7@examples/02_while.frog:24:4
[PRINT] INT():5@examples/02_while.frog:22:4
[PRINT] INT():7@examples/02_while.frog:24:4
[PRINT] INT():5@examples/02_while.frog:22:4

[EXIT CODE] 0
============================================================
[CMD] py -m frog build -r examples/02_while.frog
[STDOUT]:
[CMD] gcc examples/02_while.c -o examples/02_while.exe
[CMD] ./examples/02_while.exe
[STDOUT]:
1
5
7
5
7
5
7
5
7
5


[EXIT CODE] 0
============================================================
[CMD] py -m frog run examples/03_fib.frog
[STDOUT]:
[PRINT] INT():1@examples/03_fib.frog:4:6
[PRINT] INT():1@examples/03_fib.frog:2:44
[PRINT] INT():2@examples/03_fib.frog:2:44
[PRINT] INT():3@examples/03_fib.frog:2:44
[PRINT] INT():5@examples/03_fib.frog:2:44
[PRINT] INT():8@examples/03_fib.frog:2:44
[PRINT] INT():13@examples/03_fib.frog:2:44
[PRINT] INT():21@examples/03_fib.frog:2:44
[PRINT] INT():34@examples/03_fib.frog:2:44
[PRINT] INT():55@examples/03_fib.frog:2:44
[PRINT] INT():89@examples/03_fib.frog:2:44
[PRINT] INT():144@examples/03_fib.frog:2:44
[PRINT] INT():233@examples/03_fib.frog:2:44
[PRINT] INT():377@examples/03_fib.frog:2:44
[PRINT] INT():610@examples/03_fib.frog:2:44

[EXIT CODE] 0
============================================================
[CMD] py -m frog build -r examples/03_fib.frog
[STDOUT]:
[CMD] gcc examples/03_fib.c -o examples/03_fib.exe
[CMD] ./examples/03_fib.exe
[STDOUT]:
1
1
2
3
5
8
13
21
34
55
89
144
233
377
610


[EXIT CODE] 0
============================================================
[CMD] py -m frog run examples/04_procs.frog
[STDOUT]:
[INFO] examples/04_procs.frog:4:24: Stack at compile time:
[NOTE] stack:
      0. INT()@examples/04_procs.frog:4:10
[INFO] examples/04_procs.frog:4:24: Stack at runtime:
[NOTE] stack:
      0. INT():9@examples/04_procs.frog:2:25
[PRINT] INT():9@examples/04_procs.frog:2:25
[INFO] examples/04_procs.frog:4:24: Stack at runtime:
[NOTE] stack:
      0. INT():8@examples/04_procs.frog:2:25
[PRINT] INT():8@examples/04_procs.frog:2:25
[INFO] examples/04_procs.frog:4:24: Stack at runtime:
[NOTE] stack:
      0. INT():7@examples/04_procs.frog:2:25
[PRINT] INT():7@examples/04_procs.frog:2:25
[INFO] examples/04_procs.frog:4:24: Stack at runtime:
[NOTE] stack:
      0. INT():6@examples/04_procs.frog:2:25
[PRINT] INT():6@examples/04_procs.frog:2:25
[INFO] examples/04_procs.frog:4:24: Stack at runtime:
[NOTE] stack:
      0. INT():5@examples/04_procs.frog:2:25
[PRINT] INT():5@examples/04_procs.frog:2:25

[EXIT CODE] 0
============================================================
[CMD] py -m frog build -r examples/04_procs.frog
[STDOUT]:
[INFO] examples/04_procs.frog:4:24: Stack at compile time:
[NOTE] stack:
      0. INT()@examples/04_procs.frog:4:10
[CMD] gcc examples/04_procs.c -o examples/04_procs.exe
[CMD] ./examples/04_procs.exe
[STDOUT]:
9
8
7
6
5


[EXIT CODE] 0
